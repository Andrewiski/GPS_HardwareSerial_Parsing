<!DOCTYPE html>
<html>
<head>
	<meta http-equiv="Content-type" content="text/html; charset=utf-8">
	<title>GPS Monitor</title>
	<style>
		#map {
			height: 700px;
			width: 100%;
		}
		.gpsTrack{
			cursor:pointer;
		}
		.gpsTracks{
			font-size:x-small;
		}
	</style>

	<!--<link href="/webserver/includes/bootstrap/css/bootstrap.min.css" rel="stylesheet" />
	<link href="/webserver/includes/bootstrap/css/bootstrap-theme.min.css" rel="stylesheet" />-->
	<!--<link href="/webserver/includes/animate-css/animate.min.css" rel="stylesheet" />-->
	<!--<script src="/webserver/includes/bootstrap/js/bootstrap.min.js" type="text/javascript"></script>-->
	<!--<script src="/webserver/includes/bootstrap-notify/bootstrap-notify.min.js" type="text/javascript"></script>-->

	<!--<link href="/webserver/includes/fontawesome/css/font-awesome.min.css" rel="stylesheet" />
	<script src="/webserver/includes/jquery/jquery-3.5.1.min.js" type="text/javascript"></script>
	<script src="/webserver/includes/moment/moment.min.js" type="text/javascript"></script>-->

	<link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css" integrity="sha256-eZrrJcwDc/3uDhsdt61sL2oOBY362qM3lon1gyExkL0=" crossorigin="anonymous" />
	<script src="https://code.jquery.com/jquery-3.5.1.min.js" type="text/javascript"></script>
	<script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.26.0/moment-with-locales.min.js" integrity="sha256-4HOrwHz9ACPZBxAav7mYYlbeMiAL0h6+lZ36cLNpR+E=" crossorigin="anonymous"></script>
	<script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyBZ8dOoDr5V62sJD2YBb0flw6RxOA5FhJE" type="text/javascript"></script>
	<script>

        var commonData =
        {
            devices: {} 
        }

        addDevice({ deviceName: "localDevice" });
		addTrackLog({ deviceName: "localDevice", trackName:"current" })
        var refreshRate = 10000;
        var getCurrentPathInterval = null;
		var map = null;
		var mapCenter = { lat: 39.000000, lng: -99.000000 };
		var askedDate = null;

		var carImg = "M17.402,0H5.643C2.526,0,0,3.467,0,6.584v34.804c0,3.116,2.526,5.644,5.643,5.644h11.759c3.116,0,5.644-2.527,5.644-5.644 V6.584C23.044,3.467,20.518,0,17.402,0z M22.057,14.188v11.665l-2.729,0.351v-4.806L22.057,14.188z M20.625,10.773 c-1.016,3.9-2.219,8.51-2.219,8.51H4.638l-2.222-8.51C2.417,10.773,11.3,7.755,20.625,10.773z M3.748,21.713v4.492l-2.73-0.349 V14.502L3.748,21.713z M1.018,37.938V27.579l2.73,0.343v8.196L1.018,37.938z M2.575,40.882l2.218-3.336h13.771l2.219,3.336H2.575z M19.328,35.805v-7.872l2.729-0.355v10.048L19.328,35.805z";
		var carIcon = {
		  path: carImg,
		  scale: .7,
		  strokeColor: 'white',
		  strokeWeight: .10,
		  fillOpacity: 1,
		  fillColor: '#404040',
		  offset: '5%',
		  // rotation: parseInt(heading[i]),
		  anchor: new google.maps.Point(10, 25) // orig 10,50 back of car, 10,0 front of car, 10,25 center of car
		};

		function zoomToFit(path) {
		  var bounds = new google.maps.LatLngBounds();
		  path.forEach(function(latLng) {
			bounds.extend(latLng);
		  });
		  map.fitBounds(bounds);                    
		}

		function markersClearMap(markers) {
		  markers.forEach(function(marker) {
			marker.setMap(null);
		  });                  
		}


        function addTrackLog(options) {
            var device = commonData.devices[options.deviceName];
            var trackLog = {
				name: options.trackName,
                mapMarkers: [],
                mapPath: null,
                gpsData: []
            };

            device.trackLogs[options.trackName] = trackLog;

            trackLog.mapPath = new google.maps.Polyline({
				geodesic: true,
				strokeColor: '#FF0000',
				strokeOpacity: 1.0,
				strokeWeight: 2
            });

			google.maps.event.addListener(trackLog.mapPath, 'click', function(h) {
				 var latlng=h.latLng;
				 var needle = {
					 minDistance: 9999999999, //silly high
					 index: -1,
                     latlng: null,
					 data:null
				 };
				 trackLog.mapPath.getPath().forEach(function(routePoint, index){
					 var dist = google.maps.geometry.spherical.computeDistanceBetween(latlng, routePoint);
					 if (dist < needle.minDistance){
						needle.minDistance = dist;
						needle.index = index;
						needle.latlng = routePoint;
					 }
				 });
				 // The closest point in the polyline
				 alert("Closest index: " + needle.index + " Speed:" + trackLog.gpsData[needle.index].speed );

				 // The clicked point on the polyline
				 //alert(latlng);

            });
        }

        function addDevice(options) {

            var device = {
                deviceName: options.deviceName, 
                trackLogs: {}
            }
            commonData.devices[options.deviceName] = device;
        }

		function getUrlVars() {
			var vars = [], hash;
			var hashes = window.location.href.slice(window.location.href.indexOf('?') + 1).split('&');
			for (var i = 0; i < hashes.length; i++) {
				hash = hashes[i].split('=');
				vars.push(hash[0]);
				vars[hash[0]] = hash[1];
			}
			return vars;
		}
		var qs = getUrlVars();
		function initMap() {
			map = new google.maps.Map(document.getElementById('map'), {
				zoom: 4,
				center: mapCenter
			});

			

			// Create the DIV to hold the control and call the CenterControl()
			// constructor passing in this DIV.
			var controlsDiv = $('.googleMapControls')
			controlsDiv.find(".btnCurrentLocation").on("click", centerMapCurrentPositionClick);
			controlsDiv.find(".btnCurrentPath").on("click", getCurrentPathClick);

			// Setup the click event listeners: simply set the map to Chicago.
			//controlUI.addEventListener('click', function() {
			//  map.setCenter(chicago);
			//});

			controlsDiv.index = 1;
			map.controls[google.maps.ControlPosition.TOP_RIGHT].push(controlsDiv[0]);
		}

        function centerMapCurrentPositionClick() {
			stopCurrentPathTimer();
            centerMapCurrentPosition();
            
        }

        function getCurrentPathClick() {
            
            getCurrentPath();
            startCurrentPathTimer();
        }

		function getGPSCurrentPosition() {
			var defer = $.Deferred();

			askedDate = document.getElementById("Date").value;
			$.ajax({
				url: "/getCurrentPosition",
				dataType: "json",
				data: null
			}).then(function (data) {
				defer.resolve(data);
			}, function (jqXHR, textStatus, errorThrown) {
				console.log("Error Getting Current Position", textStatus, errorThrown);
				defer.reject(jqXHR, textStatus, errorThrown);
			})
			return defer.promise();
		}

		function getGPSCurrentPath() {
			var defer = $.Deferred();
			$.ajax({
				url: "/getCurrentPath",
				dataType: "json",
				data: null
			}).then(function (data) {
				defer.resolve(data);
			}, function (jqXHR, textStatus, errorThrown) {
				console.log("Error Getting Current Position", textStatus, errorThrown);
				defer.reject(jqXHR, textStatus, errorThrown);
			})
			return defer.promise();
		}

        function startCurrentPathTimer() {
            if (getCurrentPathInterval == null) {
				getCurrentPathInterval = setInterval(getCurrentPath, refreshRate);
            }
        }

		function stopCurrentPathTimer() {
            if (getCurrentPathInterval !== null) {
                clearInterval(getCurrentPathInterval);
				getCurrentPathInterval = null;
            }
        }

		function getGPSData() {
			var defer = $.Deferred();
			if (qs.debug) {
				defer.resolve(sampleData);
			} else {
				askedDate = document.getElementById("Date").value;
				$.ajax({
					url: "/getGpsData?Date=" + askedDate,
					dataType: "json",
					data: null
				}).then(function (data) {
					defer.resolve(data);
				}, function (jqXHR, textStatus, errorThrown) {
					console.log("Error Getting Position", textStatus, errorThrown);
					defer.reject(jqXHR, textStatus, errorThrown);
				})
			}
			return defer.promise();
		}

		function getGPSLogFiles() {
			var defer = $.Deferred();
			if (qs.debug) {
				defer.resolve(sampleData);
			} else {
				askedDate = document.getElementById("Date").value;
				$.ajax({
					url: "/list?dir=/gpsLogs",
					dataType: "json",
					data: null
				}).then(function (data) {
					defer.resolve(data);
				}, function (jqXHR, textStatus, errorThrown) {
					console.log("Error Getting Gps Log Files", textStatus, errorThrown);
					defer.reject(jqXHR, textStatus, errorThrown);
				})
			}
			return defer.promise();
		}
		function centerMapCurrentPosition() {
			console.log("Getting Current Position");

			getGPSCurrentPosition().then(function (data) {

				if (data.valid == true) {
					map.setCenter({ lat: data.lat, lng: data.lng });
					map.setZoom(9);

				} else {
					alert("No Valid GPS Fix Yet");
				} //setTimeout(updateMap, refreshRate);
			}, function (jqXHR, textStatus, errorThrown) {
				console.log("Error Getting GPS Data", textStatus, errorThrown);
				//setTimeout(updateMap, refreshRate);
			})
		};

        function getCurrentPath() {
            var deviceName = "localDevice";
			var trackName = "current";
			console.log("Getting Current Path " + deviceName);

			getGPSCurrentPath().then(function (data) {
                var trackLog = commonData.devices[deviceName].trackLogs[trackName];
                markersClearMap(trackLog.mapMarkers);
				trackLog.mapMarkers = [];
				trackLog.mapPath.setMap(null);
                var mapPathPoints = [];
                trackLog.gpsData = data;
				$.each(data, function (index, item) {
					if (item.valid === true) {
						
                        mapPathPoints.push({ lat: item.lat, lng: item.lng});
						if (index == data.length-1) {
							var marker = new google.maps.Marker({
								position: { lat: item.lat, lng: item.lng },
                                title: moment(item.time).format("LTS") + "\n Speed:" + item.speed + "\n Angle:" + item.angle,
								icon: carIcon,
								map: map
							});
							marker.addListener('click', function () {
								var infoWindow = new google.maps.InfoWindow({
									Content: moment(item.time).format("LTS") + "<br/> Speed:" + item.speed + "<br/>Angle:" + item.angle
								});
								infoWindow.open(map, marker);
							});
							trackLog.mapMarkers.push(marker);
						}
					}
				});
				trackLog.mapPath.setPath(mapPathPoints);
                trackLog.mapPath.setMap(map);
                zoomToFit(mapPathPoints);
				//setTimeout(updateMap, refreshRate);
			}, function (jqXHR, textStatus, errorThrown) {
				console.log("Error Getting GPS Data", textStatus, errorThrown);
				//setTimeout(updateMap, refreshRate);
			})
		};


        function getGpsLogFile(evt) {
            var deviceName = 'localDevice';
            console.log("Getting GPS Log File");
            var $gpsTrack = $(evt.currentTarget);
            var fileName = $gpsTrack.attr("data-trackName");
            var trackName = fileName;
            var device = commonData.devices[deviceName];
			if (commonData.devices[deviceName].trackLogs[trackName] === undefined) {
                addTrackLog({ deviceName: deviceName, trackName: fileName });
            } 
            var trackLog = commonData.devices[deviceName].trackLogs[trackName];
            var isGpsTrackVisible = $gpsTrack.find(".gpsTrackVisible").prop("checked");
			
            if (isGpsTrackVisible === false) {
                markersClearMap(trackLog.mapMarkers);
                trackLog.mapMarkers = [];
                trackLog.mapPath.setMap(null);
            } else {
                $.get({ url: '/gpsLogs/' + fileName }).then(
                    function (data) {
                        markersClearMap(trackLog.mapMarkers);
                        trackLog.mapMarkers = [];
                        trackLog.mapPath.setMap(null);
                        var mapPathPoints = [];
                        $.each(data, function (index, item) {
                            mapPathPoints.push({ lat: item.lat, lng: item.lng });
                            if (index == 0) {
                                var marker = new google.maps.Marker({
                                    position: { lat: item.lat, lng: item.lng },
                                    label: (index == 0) ? "A" : "B",
                                    map: map
                                });
                                marker.addListener('click', function () {
                                    var infoWindow = new google.maps.InfoWindow({
                                        Content: moment(item.time).format("LTS") + "<br/> Speed:" + item.speed + "<br/>Angle:" + item.angle
                                    });
                                    infoWindow.open(map, marker);
                                });
                                trackLog.mapMarkers.push(marker);
                            }
                            if (index == data.length - 1) {
                                var marker = new google.maps.Marker({
                                    position: { lat: item.lat, lng: item.lng },
                                    title: moment(item.time).format("LTS") + "\n Speed:" + item.speed + "\n Angle:" + item.angle,
                                    icon: carIcon,
                                    map: map
                                });
                                marker.addListener('click', function () {
                                    var infoWindow = new google.maps.InfoWindow({
                                        Content: moment(item.time).format("LTS") + "<br/> Speed:" + item.speed + "<br/>Angle:" + item.angle
                                    });
                                    infoWindow.open(map, marker);
                                });
                                trackLog.mapMarkers.push(marker);
                            }
                        });
                        //console.log("coordinates are", GpsCoordinates);
                        //drawPolyLines();
                        trackLog.mapPath.setPath(mapPathPoints);
                        trackLog.mapPath.setMap(map);
                        zoomToFit(mapPathPoints);

                    }, function (jqXHR, textStatus, errorThrown) {
                        console.log("Error Getting GPS Data", textStatus, errorThrown);
                        //setTimeout(updateMap, refreshRate);
                    })
            }
		};
		/*function drawPolyLines() {
		   trackPath = new google.maps.Polyline({
				   path: GpsCoordinates,
				   geodesic: true,
				   strokeColor: '#FF0000',
				   strokeOpacity: 1.0,
				   strokeWeight: 2
		   });
		   trackPath.setMap(map);

		}*/
		var getAutoConnectMenu = function () {
			if (!qs.debug) {
				$("div.menu").load("/autoconnectMenu");
			}
        }
        
		$(document).ready(function () {

			getAutoConnectMenu();
			initMap();
			centerMapCurrentPosition();
            $('.btnDeviceTracksRefresh').on("click", function () {
                getGPSLogFiles().then(
                    function (data) {
                        var $gpsTrackList = $('.gpsTracks')
                        var $gpsTrackTemplate = $('.gpsTrackTemplate').find(".gpsTrack");
                        $gpsTrackList.empty();
                        $.each(data, function (index, item) {
                            var $gpsTrack = $gpsTrackTemplate.clone(true);
                            var fileDate = moment.utc(item.name, "YYYYMMDD_hhmmss.json").local();
                            $gpsTrack.attr('data-trackName', item.name);
                            $gpsTrack.find('.gpsTrackLabel').html(fileDate.format("L") + '&nbsp;' + fileDate.format("LT"));
                            $gpsTrack.on("click", getGpsLogFile); 
                            $gpsTrackList.append($gpsTrack);
                        });
                        
						
                    },
                    function (jqXHR, textStatus, errorThrown) {
						console.log("Error Getting GPS Files", textStatus, errorThrown);
						//setTimeout(updateMap, refreshRate);
	                }
                )
			});
		});
	</script>
</head>
    <body>
	
		<div style="        width: 100%
">
			<div style="display:inline-block; float:left"><div class="menu"></div></div>
			<div style="width:100%; text-align: center">
				<h3>Teo GPS Tracker</h3>
			</div>
			<div style="display:inline-block">
				<label for="Date">        Choose The Date:</label>
				<input type="date" id="Date" name="Date">
				<button class="searchForFile">Search!</button>
			</div>
			

			<div style="width:100%">
				<div id="map"></div>
			</div>
		</div>
		<div class="templates" style="display:none">
			<div class="googleMapControls">
				<div style="background-color: rgb(255, 255, 255); border: 2px solid rgb(255, 255, 255); border-radius: 3px; box-shadow: rgba(0, 0, 0, 0.3) 0px 2px 6px; margin-bottom: 22px; margin-right:22px; margin-top:22px; text-align: center;">
					<div class="btnCurrentLocation" title="Current Position" style="color: rgb(25, 25, 25); font-family: Roboto, Arial, sans-serif; font-size: 16px; line-height: 38px; padding-left: 5px; padding-right: 5px; cursor: pointer;">
						<i class="fa fa-location-arrow "></i>
					</div>
					<div class="btnCurrentPath" title="Current Path" style="color: rgb(25, 25, 25); font-family: Roboto, Arial, sans-serif; font-size: 16px; line-height: 38px; padding-left: 5px; padding-right: 5px; cursor: pointer;">
						<i class="fa fa-map-o" aria-hidden="true"></i>
					</div>
					<div class="">
						<table>
							<thead>
								<tr>
									<th><div class="btnDeviceTracksRefresh">Tracks <i class="fa fa-refresh"></i></div></th>
								</tr>
							</thead>
							<tbody class="gpsTracks">
							</tbody>
						</table>
					</div>
				</div>
			</div>
			<div class="googleMapDeviceControls">

			</div>
			<table class="gpsTrackTemplate">
				<tr class="gpsTrack"><td><input type="checkbox" class="gpsTrackVisible" /><span class="gpsTrackLabel">AA</span></td></tr>
			</table>
		</div>
</body>
</html>
